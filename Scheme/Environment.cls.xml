<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Scheme.Environment">
<Super>%RegisteredObject</Super>
<TimeCreated>64008,57544.930776</TimeCreated>

<Property name="outer">
<Type>Scheme.Environment</Type>
</Property>

<Property name="data">
<Type>%Object</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>parms:%Array,args:%Array,outer:Scheme.Environment=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..data = {}
	
	if $Data(parms) {
		set iter = parms.$getIterator()
		while iter.$getNext(.key , .value ) {
	   		do ..data.$set(value, args.$get(key))
		}
	}
	set ..outer = outer
	quit $$$OK
]]></Implementation>
</Method>

<Method name="find">
<CodeMode>expression</CodeMode>
<FormalSpec>var</FormalSpec>
<ReturnType>Environment</ReturnType>
<Implementation><![CDATA[$case(..data.$isDefined(var),1:$this,:..outer.find(var))
]]></Implementation>
</Method>

<Method name="get">
<CodeMode>expression</CodeMode>
<FormalSpec>x</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..data.$get(x)
]]></Implementation>
</Method>

<Method name="put">
<FormalSpec>var:%String,val</FormalSpec>
<Implementation><![CDATA[	do ..data.$set(var, val)
]]></Implementation>
</Method>

<Method name="standard">
<ClassMethod>1</ClassMethod>
<ReturnType>Scheme.Environment</ReturnType>
<Implementation><![CDATA[
	set res = ..%New()
	
	for op="+","-","*","/",">","<",">=","<=","=","**" {
		do res.put(op, "(x,y) return x "_op_" y")
	}
	do res.put("abs","(x) return $zabs(x)")
	do res.put("pi", $zpi)
	do res.put("begin","(x...) return x(x)") //return last expression
	do res.put("car","(x) return x.$get(0)")
	do res.put("cdr","(x) set r=[], iter = x.$getIterator() do iter.$getNext()  while iter.$getNext(.key , .value ) {do r.$push(value)} return r")
	do res.put("cons","(x,y) set r=[],r.$push(x),iter = y.$getIterator()  while iter.$getNext(.key , .value ) {do r.$push(value)} return r")
	do res.put("equal?","(x,y) return (x = y) || ($isobject(x) && $isobject(y) && (x.$toJSON() = y.$toJSON()))")
	do res.put("procedure?","(x) return $isobject(x) && x.%IsA(""Scheme.Procedure"")")
	return res
]]></Implementation>
</Method>
</Class>
</Export>
