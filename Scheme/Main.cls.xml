<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Scheme.Main">
<Description>
ideas are taken from 
http://norvig.com/lispy.html</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>64008,2489.737094</TimeCreated>

<Parameter name="trace">
<Default>0</Default>
</Parameter>

<Method name="tokenize">
<ClassMethod>1</ClassMethod>
<FormalSpec>chars:%String</FormalSpec>
<ReturnType>%Array</ReturnType>
<Implementation><![CDATA[
	set str = $replace($replace(chars,"("," ( "),")"," ) ")
	set res = []
	for i=1:1:$Length(str, " ") {
		set item = $Piece(str, " ", i)
		if item'="" {
			do res.$push(item)
		}
	}
	return res
]]></Implementation>
</Method>

<Method name="parse">
<ClassMethod>1</ClassMethod>
<FormalSpec>program:%String</FormalSpec>
<ReturnType>%Array</ReturnType>
<Implementation><![CDATA[	return ..readFromTokens(..tokenize(program))
]]></Implementation>
</Method>

<Method name="readFromTokens">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&tokens:%Array]]></FormalSpec>
<ReturnType>%Array</ReturnType>
<Implementation><![CDATA[
	if tokens.$size() = 0 {
		throw ##class(%Exception.General).%New("unexpected EOF while reading",100)
	}
	set token = tokens.$get(0) 
	do tokens.$remove(0)
	if token = "(" {
		set L = []
		while tokens.$get(0) '= ")" {
			do L.$push(..readFromTokens(.tokens))
		}
		do tokens.$remove(0)
		return L
	} elseif token = ")" {
		throw ##class(%Exception.General).%New("unexpected )",101,,tokens.$toJSON())
	} else {
		return ..atom(token)
	}
]]></Implementation>
</Method>

<Method name="isNumber">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>s:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[s = +s
]]></Implementation>
</Method>

<Method name="atom">
<ClassMethod>1</ClassMethod>
<FormalSpec>token:%String</FormalSpec>
<Implementation><![CDATA[
	if ..isNumber(token) {
		quit +token
	} else {
		quit token
	}
]]></Implementation>
</Method>

<Method name="eval">
<ClassMethod>1</ClassMethod>
<FormalSpec>x,env:Scheme.Environment=##class(Scheme.Environment).standard()</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ..#trace = 1 {
		write "evaluating: ",$case($isobject(x),1:x.$toJSON(),:x),!
	}
	if ..isNumber(x) {  //constant literal
		write:..#trace "it is constant",!
		set res = x
	}elseif '$isobject(x) { //variable reference
		write:..#trace "it is var ref",!
		set res = env.find(x).get(x)
	}elseif x.$size() = 0 {
		write:..#trace "it is constant",!
		set res = 0
	}elseif x.$get(0) = "quote" { // (quote exp)
		set res = x.$get(1)
	}elseif x.$get(0) = "if" { // (if test conseq alt)
		set test = x.$get(1)
		set conseq = x.$get(2)
		set alt = x.$get(3)
		set testres = ..eval(test, env)
		//we treat empty list () as false!
		if testres && ('$isobject(testres) || testres.$size()) {
			set exp = conseq
		} else {
			set exp = alt
		}
		set res = ..eval(exp, env)
	}elseif x.$get(0) = "define" { // (define var exp)
		set var = x.$get(1)
		set exp = x.$get(2)
		do env.put(var, ..eval(exp, .env))
		set res = "" // TODO: or what should define return?
	}elseif x.$get(0) = "set!" { // (set! var exp)
		set var = x.$get(1)
		set exp = x.$get(2)
		do env.find(var).put(var, ..eval(exp, .env))
		set res = "" // TODO: or what should set! return?
	}elseif x.$get(0) = "lambda" { //(lambda (var...) body)
		set parms = x.$get(1)
		set body = x.$get(2)
		set res = ##class(Scheme.Procedure).%New(parms, body, env)
	} else {
		set proc = ..eval(x.$get(0), env)
		kill args
		set args=0
		
		set iter = x.$getIterator()
		while iter.$getNext(.key , .value ) {
			continue:key=0
			set args = args+1
			set args(args) = ..eval(value, env)
		}
		
		if ..#trace {
			write "===calling proc==",!
			write $isobject(proc),!
			zwrite proc
			write "===with args==",!
			zwrite args
		}
		
		if $isobject(proc) {
			//convert args from multidimensional to $Array
			set normargs = []
			for i=1:1:args {
				do normargs.$push(args(i))
			}
			set res = proc.call(normargs)
		} else {
			set res = $xecute(proc,args...)
		}
	}
	return res
]]></Implementation>
</Method>

<Method name="repl">
<Description>
do ##class(Scheme.Main).repl()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[prompt:%String="lisp> "]]></FormalSpec>
<Implementation><![CDATA[
	while 1 {
		write prompt
		read x,!
		if x=":q" {
			quit
		}
		set val = ..eval(..parse(x),.env)
		write:val'="" ..schemestr(val),!
	}
]]></Implementation>
</Method>

<Method name="schemestr">
<ClassMethod>1</ClassMethod>
<FormalSpec>exp:%Array</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $isobject(exp) {
		set res = "("
		set iter = exp.$getIterator()
	    while iter.$getNext(.key , .value ) {
		    if $isobject(value) {
			    set res = res _ ..schemestr(value)
		    } else {
			    set res = res _ value
		    }
		    set res = res _ " " 
	    }
		set:res'="(" $Extract(res,*)=""
		return res _ ")"
	} else {
		return exp
	}
]]></Implementation>
</Method>

<Method name="test">
<Description>
do ##class(Scheme.Main).test()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set p=5
	set p(1) = "(define map (lambda (fun L) (if L (cons (fun (car L)) (map fun (cdr L))) () )))"
	set p(2) = "(define fact (lambda (n) (if (<= n 1) 1 (* n (fact (- n 1))))))"
	set p(3) = "(define range (lambda (a b) (if (= a b) (quote ()) (cons a (range (+ a 1) b)))))"
	set p(4) = "(range 0 10)"
	set p(5) = "(map fact (range 0 10))"
	

		for i=1:1:p {
			write ">>",p(i),!
			set val = ..eval(..parse(p(i)), .env)
			write:val'="" ..schemestr(val),!
		}
]]></Implementation>
</Method>
</Class>
</Export>
